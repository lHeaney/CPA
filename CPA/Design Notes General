/*
		 * TO-DO List:
		 * React UI interface
		 * Database Schema
		 * Java program connection to SQL
		 * SQL Database itself:
		 * 
		 * 	Determination of features:
		 * 		need to handle tax returns, so uploading files is necessary
		 * 		need to be able to upload multiple files/folders for multiple records
		 * 		can create new returns
		 * 		can view all their existing returns
		 * 		can categorize returns
		 * 		can change return categories
		 * 		can sort the returns (filter, by category, name, date, ect)
		 * 		can search the returns
		 * 
		 * Considerations:
		 * 		multiple users -> id and login information, included in REST requests to ensure only authorized access to records
		 * 		multiple licenses -> some users have only X amount of tax returns they can file, some are limited to X "business" returns, ect
		 * 		Allow for category deletion (possibly part of move category? maybe have 2 categories, "uncategorized" and "trash", with the option to delete the trash?)
		 * 		Include testing, handling, and exceptions for edge cases.
		 * 		Ensure hashed login info always sent with requests to maintain stateless circumstances
		 * 
		 * Possibilities:
		 * 		MySQL database reduced to 2NF or 3NF? for storage of records in most efficient way? Maybe even 4NF if I have time.
		 * 		Add in SQL Injection protection or other cybersecurity pieces.
		 * 
		 */